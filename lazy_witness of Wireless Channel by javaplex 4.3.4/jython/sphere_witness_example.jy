#!/usr/bin/env jython

import sys

# Todo: make sure that this points to the correct location
libs = [
    "../lib/javaplex.jar"
    ]
for s in libs:
    sys.path.append(s)

import edu.stanford.math.plex4
import edu.stanford.math.plex4.api
import edu.stanford.math.plex4.examples
import edu.stanford.math.plex4.io

# This script calculates the intervals for a Lazy-Witness complex generated
# from random points on the 2-sphere

dimension = 2
num_points = 10000
num_landmark_points = 100
max_filtration_value = 0.1

# create the set of points
point_cloud = edu.stanford.math.plex4.examples.PointCloudExamples.getRandomSpherePoints(num_points, dimension)

# create a randomized landmark selector
landmark_selector = edu.stanford.math.plex4.api.Plex4.createRandomSelector(point_cloud, num_landmark_points)
# create a Lazy-Witness Stream - note that this sets the number of
# divisions to the default value of 20
stream = edu.stanford.math.plex4.api.Plex4.createLazyWitnessStream(landmark_selector, dimension + 1, max_filtration_value, 1000)

# print out the size of the stream - will be quite large since the complex
# construction is very sensitive to the maximum filtration value
size = stream.getSize()

# get the default persistence algorithm
persistence = edu.stanford.math.plex4.api.Plex4.getDefaultSimplicialAlgorithm(dimension + 1)

# compute the intervals and transform them to filtration values
filtration_value_intervals = persistence.computeIntervals(stream)

## Output

# create the barcode plots
edu.stanford.math.plex4.io.BarcodeWriter.getInstance().writeToFile(filtration_value_intervals, 0, max_filtration_value, "Lazy-Witness Sphere", "lw_sphere_0.png")
edu.stanford.math.plex4.io.BarcodeWriter.getInstance().writeToFile(filtration_value_intervals, 1, max_filtration_value, "Lazy-Witness Sphere", "lw_sphere_1.png")
edu.stanford.math.plex4.io.BarcodeWriter.getInstance().writeToFile(filtration_value_intervals, 2, max_filtration_value, "Lazy-Witness Sphere", "lw_sphere_2.png")


